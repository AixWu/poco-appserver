<%@ page class="FileLink"
         formPartHandler="FileUpload"%>
<%!
#include <fstream>
#include "Poco/Net/PartHandler.h"
#include "application_server.h"
#include "model/file.h"
#include "model/configuration.h"

using namespace std;
using namespace Poco::Net;

REGISTER_PAGE(FileLink); 

class FileUpload : public PartHandler
{
public:
    FileUpload(HTTPRequestHandler& request) {}
    
    void handlePart(const MessageHeader& header, std::istream& stream)
    {
        string mimeType=header.get("Content-Type","(unspecified)");
        string formName;
        string fileName;
        if(header.has("Content-Disposition"))
        {
            string s;
            NameValueCollection param;
            MessageHeader::splitParameters(header["Content-Disposition"],s,param);
            formName=param.get("name","(unnamed)");
            fileName=param.get("filename","(unnamed)");
        }
        
        //Sanitize form data
        if(formName!="file") return;
        if(fileName.empty()) return;
        for(char c : fileName)
        {
            //To be on the safe side, reject non-ascii filenames
            if(isascii(c) && !iscntrl(c)) continue;
            //Filenames can't have path separators
            if(c!='/' && c!='\\') continue;
            linkname+=": Invalid file name.";
            return;
        }
        Configuration& cfg=Configuration::instance();
        bool found=false;
        for(auto m : cfg.allowedMimes)
        {
            if(mimeType!=m) continue;
            found=true;
            break;
        }
        if(!found)
        {
            linkname+=": Invalid file type.";
            return;
        }
        
        FileMap& fm=FileMap::instance();
        shared_ptr<UploadedFile> file;
        try {
            file=fm.add(fileName,mimeType);
        } catch(exception&) {
            linkname+=": All file slot full, wait and retry.";
            return;
        }
        
        ofstream out(file->getServerFileName().c_str());
        const int bufSize=16*1024;
        unique_ptr<char[]> buffer(new char[bufSize]);
        int fileSize=0;
        for(;;)
        {
            stream.read(buffer.get(),bufSize);
            int rd=stream.gcount();
            fileSize+=rd;
            if(fileSize>cfg.maxFileSize)
            {
                linkname+=": File too large.";
                return;
            }
            out.write(buffer.get(),rd);
            if(rd<=0) break;
        }
        
        linkname=file->getLinkKey();
        success=true;
    }
    
    string getLink() const { return linkname; }
    
    bool uploadOk() const { return success; }
    
private:
    string linkname="File upload error";
    bool success=false;
};
%>

<%
string outcome;
if(cpspPartHandler.uploadOk())
{
    outcome=
    "<a href=\"http://"+request.getHost()+"/RetrieveFile?link="+cpspPartHandler.getLink()+
    "\">http://"+request.getHost()+"/RetrieveFile?link="+cpspPartHandler.getLink()+"</a>";
} else outcome=cpspPartHandler.getLink();
%>
<html>
<head>
<title>File link</title>
</head>
<body>
<h1>Get the file link</h1>
<%=outcome%>
<br><br>
<a href="http://localhost:9980">Upload another file</a>
</body>
</html>